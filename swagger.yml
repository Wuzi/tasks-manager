swagger: "2.0"
info:
  description: This is the official documentation for the tasks manager API.
  version: 0.1.0
  title: Tasks Manager API
basePath: /v1
host: localhost
tags:
  - name: health
    description: Operations about health checks
  - name: task
    description: Operations about tasks
schemes:
  - https
  - http
paths:
  /health:
    get:
      tags:
        - health
      summary: Get the health of the api
      description: Get the health status of the api
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: The application is healthy
          schema:
            $ref: "#/definitions/HealthResponseDto"
        503:
          description: The application is not healthy (database not connected)
          schema:
            $ref: "#/definitions/HealthResponseDto"
  /tasks:
    get:
      tags:
        - task
      summary: Show a list of all tasks
      description: Return a paginated array with tasks
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          minimum: 1
          description: Page of the results
        - in: query
          name: limit
          type: integer
          minimum: 1
          maximum: 100
          description: Number of results to show per page
        - in: query
          name: title
          type: string
          description: Filter results by the title
        - in: query
          name: description
          type: string
          description: Filter results by the description
        - in: query
          name: status
          type: string
          enum: ["pending", "in progress", "done"]
          description: Filter results by status
        - in: query
          name: orderById
          type: string
          enum: ["ASC", "DESC"]
          description: Order results by id
      responses:
        200:
          description: Return an object with an array of tasks and the total results
          schema:
            type: object
            properties:
              tasks:
                type: array
                items:
                  $ref: "#/definitions/Task"
              total:
                type: integer
                description: Total of records in database (using the current filters)
              totalPages:
                type: integer
                description: Total number of pages
        422:
          description: Missing required parameters or invalid properties type
          schema:
            $ref: "#/definitions/ValidationError"
        503:
          description: Service or database unavailable
          schema:
            $ref: "#/definitions/ErrorMessage"
    post:
      tags:
        - task
      summary: Create a new task
      description: Return the new created task
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: payload
          description: Data of the task that will be created
          required: true
          schema:
            $ref: "#/definitions/CreateTaskDto"
      responses:
        200:
          description: Return the new created the task
          schema:
            $ref: "#/definitions/Task"
        422:
          description: Missing required parameters or invalid properties type
          schema:
            $ref: "#/definitions/ValidationError"
        503:
          description: Service or database unavailable
          schema:
            $ref: "#/definitions/ErrorMessage"
  /tasks/{id}:
    get:
      tags:
        - task
      summary: Get a single task
      description: Return a single task by id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: number
          required: true
          description: The id of the task
      responses:
        200:
          description: Return the task
          schema:
            $ref: "#/definitions/Task"
        422:
          description: Missing required parameters or invalid properties type
          schema:
            $ref: "#/definitions/ValidationError"
        503:
          description: Service or database unavailable
          schema:
            $ref: "#/definitions/ErrorMessage"
    put:
      tags:
        - task
      summary: Replace a task
      description: Replace a task content by id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: number
          required: true
          description: The id of the task
        - in: body
          name: payload
          description: Data of the task that will be updated
          required: true
          schema:
            $ref: "#/definitions/ReplaceTaskDto"
      responses:
        200:
          description: Return the updated task
          schema:
            $ref: "#/definitions/Task"
        422:
          description: Missing required parameters or invalid properties type
          schema:
            $ref: "#/definitions/ValidationError"
        503:
          description: Service or database unavailable
          schema:
            $ref: "#/definitions/ErrorMessage"
    patch:
      tags:
        - task
      summary: Update a task
      description: Update a task by id
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          type: number
          required: true
          description: The id of the task
        - in: body
          name: payload
          description: Data of the task that will be updated
          required: true
          schema:
            $ref: "#/definitions/UpdateTaskDto"
      responses:
        200:
          description: Return the updated task
          schema:
            $ref: "#/definitions/Task"
        422:
          description: Missing required parameters or invalid properties type
          schema:
            $ref: "#/definitions/ValidationError"
        503:
          description: Service or database unavailable
          schema:
            $ref: "#/definitions/ErrorMessage"
definitions:
  Task:
    type: object
    properties:
      id:
        type: number
        example: 1
        description: The unique id of the task
      title:
        type: string
        example: Do the laundry
        description: The title of the task
      description:
        type: string
        example: Do not forget to get the laundry done before tomorrow
        description: The description of the task
      status:
        type: string
        example: pending
        enum: ["pending", "in progress", "done"]
        description: The status of the task
      createdAt:
        type: string
        format: datetime
        example: "2020-06-28T21:16:57.318Z"
        description: The datetime whe the task was created
      updatedAt:
        type: string
        format: datetime
        example: "2020-06-28T21:16:57.318Z"
        description: The datetime whe the task was last updated
  CreateTaskDto:
    type: object
    properties:
      title:
        type: string
        example: Do the laundry
        description: The title of the task
      description:
        type: string
        example: Do not forget to get the laundry done before tomorrow
        description: The description of the task
      status:
        type: string
        example: pending
        enum: ["pending", "in progress", "done"]
        description: The status of the task
    required:
      - title
      - description
  ReplaceTaskDto:
    type: object
    properties:
      title:
        type: string
        example: Do the laundry
        description: The title of the task
      description:
        type: string
        example: Do not forget to get the laundry done before tomorrow
        description: The description of the task
      status:
        type: string
        example: pending
        enum: ["pending", "in progress", "done"]
        description: The status of the task
    required:
      - title
      - description
      - status
  UpdateTaskDto:
    type: object
    properties:
      title:
        type: string
        example: Do the laundry
        description: The title of the task
      description:
        type: string
        example: Do not forget to get the laundry done before tomorrow
        description: The description of the task
      status:
        type: string
        example: pending
        enum: ["pending", "in progress", "done"]
        description: The status of the task
  HealthResponseDto:
    type: object
    properties:
      message:
        type: string
        example: Health status
        description: The message of the response
  ValidationError:
    type: object
    properties:
      target:
        type: object
        example: {}
        description: Object that was validated
      value:
        type: object
        example: john
        description: Object's property that haven't pass validation
      property:
        type: string
        example: name
        description: Object's property that haven't pass validation
      children:
        type: array
        example: []
        description: Contains all nested validation errors of the property
      constraints:
        type: object
        example:
          { "maxLength": "name must be shorter than or equal to 3 characters" }
        description: Constraints that failed validation with error messages
  ErrorMessage:
    type: object
    properties:
      message:
        type: string
        example: Database offline
        description: The message of the error
